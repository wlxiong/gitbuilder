#!/usr/bin/env python
#
# A simple script that runs the specified command only if the given lockfile
# is not locked.  If it *is* locked, we just return 0, considering that
# a success (after all, the command probably is running successfully; it's
# just not us that ran it!)
#
# If it is *not* currently locked, we lock it, run the command, and return
# its result.
#
# We also make an extra effort to handle signals correctly and cleanup our
# subprocess and lock file when we receive one.
#
import os
import sys
import subprocess


def get_pid(lockfile):
    # if the lockfile is already there, get the PID number in the lock file
    pidfile = open(lockfile, "r")
    pidfile.seek(0)
    pid = pidfile.readline()
    try:
        pid = int(pid)
    except ValueError:
        print >> sys.stderr, "Cannot read pid from file: %s" % lockfile
        return None
    return pid


def lockFile(lockfile):
    if os.access(lockfile, os.F_OK):
        pid = get_pid(lockfile)
        if pid is not None:
            # check if the process is running
            try:
                ret = os.kill(int(pid), 0)
            except OSError:
                print >> sys.stderr, "Removing lock file for old process: %d" % pid
                os.remove(lockfile)
            else:
                if ret is None:
                    print >> sys.stderr, "Already have a process running: %d" % pid
                    return False
    # put a PID file in the lock file
    pidfile = open(lockfile, "w")
    pidfile.write("%s" % os.getpid())
    pidfile.close
    return True


def unlockFile(lockfile):
    if os.access(lockfile, os.F_OK):
        os.remove(lockfile)


def main():
    args = sys.argv
    if len(args) < 2:
        print >> sys.stderr, "Usage: %s <lockfile> <command line...>" % args[0]
        sys.exit(1)
    filename = 'lock.' + args[1]
    if not lockFile(filename):
        sys.exit(0)
    commands = args[2:]
    try:
        ret = subprocess.call(commands)
    finally:
        unlockFile(filename)
    sys.exit(ret)


if __name__ == '__main__':
    main()
