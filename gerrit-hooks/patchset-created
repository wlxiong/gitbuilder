#!/usr/bin/env python
import os
import sys
import getopt
import subprocess

# patchset-created
# --change <change id>
# --is-draft <boolean>
# --change-url <change url>
# --project <project name>
# --branch <branch>
# --topic <topic>
# --uploader <uploader>
# --commit <sha1>
# --patchset <patchset id>


def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "",
                                   ["change=", "is-draft=", "kind=", "change-url=", "change-owner=", "project=",
                                    "branch=", "topic=", "uploader=", "commit=", "patchset="])
    except getopt.GetoptError, err:
        print >> sys.stderr, str(err)
        sys.exit(2)

    project = None
    commit = None
    draft = None

    for o, a in opts:
        if o == '--project':
            project = a
        elif o == '--commit':
            commit = a
        elif o == '--branch':
            branch = a
        elif o == '--is-draft':
            draft = a

    print "send patchset to autobuilder:", project, branch, commit
    
    if project is None or commit is None:
        print >> sys.stderr, "cannot find --project or --commit argument"
        sys.exit(2)

    if draft == "true":
        print "ignore draft changes"
        return

    if project == 'gfs':
        script = "/home/root1/autobuilder/start"
        command = "nohup /bin/bash -l -c \"%s %s %s %s > /home/root1/autobuilder/autobuilder.out 2>&1 < /dev/null &\"" % \
                  (script, "review sha1", commit, branch)
        if '3.6' in branch:
            subprocess.call(["ssh", 'root@10.10.109.131', command])
        else:
            subprocess.call(["ssh", 'root@10.10.200.116', command])

    if project == 'xkv':
        script = "/home/root1/autobuilder/start"
        command = "nohup /bin/bash -l -c \"%s %s %s %s > /home/root1/autobuilder/autobuilder.out 2>&1 < /dev/null &\"" % \
                  (script, "review sha1", commit, branch)
        subprocess.call(["ssh", 'root@10.10.200.115', command])

    print "complete building patchset:", project, branch, commit


if __name__ == '__main__':
    main()
